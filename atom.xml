<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jerry&#39;s Diary</title>
  <subtitle>Ambitious, down to earth.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mmrxia.github.io/"/>
  <updated>2016-05-11T11:05:03.115Z</updated>
  <id>http://mmrxia.github.io/</id>
  
  <author>
    <name>xiaqingsong</name>
    <email>this.xqs@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js浮点数计算精度丢失问题</title>
    <link href="http://mmrxia.github.io/2016/05/11/js%E6%B5%AE%E7%82%B9%E6%95%B0%E8%AE%A1%E7%AE%97%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/"/>
    <id>http://mmrxia.github.io/2016/05/11/js浮点数计算精度丢失问题/</id>
    <published>2016-05-11T09:22:45.000Z</published>
    <updated>2016-05-11T11:05:03.115Z</updated>
    
    <content type="html">&lt;p&gt; 本文主要从以下3个方面来总结：&lt;br&gt; 1 . js浮点数计算精度丢失常见现象&lt;br&gt; 2 . js浮点数计算精度丢失原因&lt;br&gt; 3 . js浮点数计算精度丢失解决办法&lt;/p&gt;
&lt;h3 id=&quot;一、常见现象&quot;&gt;&lt;a href=&quot;#一、常见现象&quot; class=&quot;headerlink&quot; title=&quot;一、常见现象&quot;&gt;&lt;/a&gt;一、常见现象&lt;/h3&gt;&lt;p&gt; 1 . 两个简单的浮点数相加或相乘&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 0.1 + 0.2 != 0.3 // true  0.30000000000000004
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 又如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 0.29 * 100  // 28.999999999999996
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 2 . 大整数运算&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 9999999999999999 == 10000000000000001 // true  16位和17位数竟然相等...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 又如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; var x = 9007199254740992
 x + 1 == x // true
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;二、原因&quot;&gt;&lt;a href=&quot;#二、原因&quot; class=&quot;headerlink&quot; title=&quot;二、原因&quot;&gt;&lt;/a&gt;二、原因&lt;/h3&gt;&lt;p&gt; 计算机的二进制实现和位数限制有些数无法有限表示。就像一些无理数不能有限表示，如 圆周率 3.1415926…，1.3333… 等。JS 遵循 &lt;a href=&quot;https://en.wikipedia.org/wiki/IEEE_floating_point&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IEEE 754&lt;/a&gt; 规范，采用双精度存储（double precision），占用 64 bit。如图：&lt;br&gt; &lt;img src=&quot;http://7xth8v.com2.z0.glb.clouddn.com/image/n_64bit.png?imageView2/2/w/800&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 图中的意义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1位用来表示符号位&lt;/li&gt;
&lt;li&gt;11位用来表示指数&lt;/li&gt;
&lt;li&gt;52位表示尾数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 浮点数，比如&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 0.1 &amp;gt;&amp;gt; 0.0001 1001 1001 1001…（1001无限循环）
 0.2 &amp;gt;&amp;gt; 0.0011 0011 0011 0011…（0011无限循环）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 此时只能模仿十进制进行四舍五入了，但是二进制只有 0 和 1 两个，于是变为 0 舍 1 入。这即是计算机中部分浮点数运算时出现误差，丢失精度的根本原因。&lt;br&gt; 大整数的精度丢失和浮点数本质上是一样的，尾数位最大是 52 位，因此 JS 中能精准表示的最大整数是 Math.pow(2, 53)，十进制即 9007199254740992。&lt;br&gt; 大于 9007199254740992 的可能会丢失精度。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 9007199254740992     &amp;gt;&amp;gt; 10000000000000...000 // 共计 53 个 0
 9007199254740992 + 1 &amp;gt;&amp;gt; 10000000000000...001 // 中间 52 个 0
 9007199254740992 + 2 &amp;gt;&amp;gt; 10000000000000...010 // 中间 51 个 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 实际上&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 9007199254740992 + 1 // 丢失
 9007199254740992 + 2 // 未丢失
 9007199254740992 + 3 // 丢失
 9007199254740992 + 4 // 未丢失
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 以上，可以知道看似有穷的数字, 在计算机的二进制表示里却是无穷的，由于存储位数限制因此存在“舍去”，精度丢失就发生了。&lt;/p&gt;
&lt;p&gt; 想了解更深入的分析可以看这篇论文：&lt;a href=&quot;http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What Every Computer Scientist Should Know About Floating-Point Arithmetic&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;三、解决方案&quot;&gt;&lt;a href=&quot;#三、解决方案&quot; class=&quot;headerlink&quot; title=&quot;三、解决方案&quot;&gt;&lt;/a&gt;三、解决方案&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; var Calc = function () {
     /*浮点数去除小数点*/
     function toInt(n) {
         var n = +n, res = {num: n, times: 1};
         if (n !== (n | 0)) { //判断浮点数，n===parseInt(n)
             var arr = (&amp;#39;&amp;#39; + n).split(&amp;#39;.&amp;#39;);
             var len = arr[1].length; //小数长度
             res.times = Math.pow(10, len); //需要乘的倍数=&amp;gt;10的指数
             res.num = Math.round(n * res.times); //四舍五入取整
         }
         return res;
     }

     function operation(a, b, op) {
         var result; //最终计算的值
         var o1 = toInt(a), o2 = toInt(b);

         var n1 = o1.num, t1 = o1.times;
         var n2 = o2.num, t2 = o2.times;

         var max = Math.max(t1, t2);

         switch (op) {
             case &amp;#39;add&amp;#39;:
                 if (t1 &amp;gt; t2) {
                     result = n1 + n2 * (t1 / t2);
                 } else {
                     result = n2 + n1 * (t2 / t1);
                 }
                 result = result / max;
                 break;
             case &amp;#39;subtract&amp;#39;:
                 if (t1 &amp;gt; t2) {
                     result = n1 - n2 * (t1 / t2);
                 } else {
                     result = n2 - n1 * (t2 / t1);
                 }
                 result = result / max;
                 break;
             case &amp;#39;multiply&amp;#39;:
                 result = (n1 * n2) / (t1 * t2)
                 return result
                 break;
             case &amp;#39;divide&amp;#39;:
                 result = (n1 / n2) * (t2 / t1)
                 return result
                 break;

         }
         return result;
     }

     /*加*/
     function add(a, b) {
         return operation(a, b, &amp;#39;add&amp;#39;);
     }

     /*减*/
     function subtract(a, b) {
         return operation(a, b, &amp;#39;subtract&amp;#39;);
     }

     /*乘*/
     function multiply(a, b) {
         return operation(a, b, &amp;#39;multiply&amp;#39;);
     }

     /*除*/
     function divide(a, b) {
         return operation(a, b, &amp;#39;divide&amp;#39;);
     }

     //exports
     return {
         add: add,
         subtract: subtract,
         multiply: multiply,
         divide: divide
     }
 }();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;p&gt; &lt;a href=&quot;http://0.30000000000000004.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://0.30000000000000004.com&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt; 本文主要从以下3个方面来总结：&lt;br&gt; 1 . js浮点数计算精度丢失常见现象&lt;br&gt; 2 . js浮点数计算精度丢失原因&lt;br&gt; 3 . js浮点数计算精度丢失解决办法&lt;/p&gt;
&lt;h3 id=&quot;一、常见现象&quot;&gt;&lt;a href=&quot;#一、常见现象&quot; class=&quot;heade
    
    </summary>
    
    
      <category term="js" scheme="http://mmrxia.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>跨域的几种方式</title>
    <link href="http://mmrxia.github.io/2016/05/09/%E8%B7%A8%E5%9F%9F%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://mmrxia.github.io/2016/05/09/跨域的几种方式/</id>
    <published>2016-05-09T07:37:30.000Z</published>
    <updated>2016-05-09T08:06:05.872Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;跨域，怎么处理跨域问题？无论是在面试中，还是在工作当中，总是会经常被问到，所以在这里总结下跨域的几种处理方式好了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-jsonp方式&quot;&gt;&lt;a href=&quot;#1-jsonp方式&quot; class=&quot;headerlink&quot; title=&quot;1 . jsonp方式&quot;&gt;&lt;/a&gt;1 . jsonp方式&lt;/h3&gt;&lt;p&gt;在js中，我们直接用&lt;code&gt;XMLHttpRequest&lt;/code&gt;请求不同域上的数据是不可以的，而在html中，能够实现跨域的就几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;link属性（css）&lt;/li&gt;
&lt;li&gt;href属性（a标签）&lt;/li&gt;
&lt;li&gt;src（img标签、script标签）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了解决跨域的问题，结合script能够发起跨域请求的原理，产生了jsonp，即：动态的创建script标签，跨域的地址加上需要传送的数据和回调函数为script标签的src地址，执行完之后再动态的删除之前创建的script.&lt;/p&gt;
&lt;p&gt;理解了原理之后，就很容易明白jsonp的缺点了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只能用get方式请求，因为是使用src来传送数据&lt;/li&gt;
&lt;li&gt;数据中出现中文需要编码。因为通过url传参数，可以在浏览器输入地址并带上中文参数试试&lt;/li&gt;
&lt;li&gt;src对请求的地址没有限制，会出现安全性的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-document-domain&quot;&gt;&lt;a href=&quot;#2-document-domain&quot; class=&quot;headerlink&quot; title=&quot;2 . document.domain&quot;&gt;&lt;/a&gt;2 . document.domain&lt;/h3&gt;&lt;p&gt;看到这个跨域方式，可能有些同学会觉得陌生，其实这个也很常用。&lt;br&gt;每次遇到有需要使用登录之类的项目，在开发的时候都需要将地址改成163的域名，为啥？在控制台打印一下&lt;code&gt;document.domain&lt;/code&gt;试试,这篇文章的控制台输出的是&lt;code&gt;feg.netease.com&lt;/code&gt;，而在有使用到163登录的项目中，输出的都是&lt;code&gt;163.com&lt;/code&gt;。登录组件限制在163域名下才能用，但是163的域名有很多，避免不同域名之间出现通信问题，使用&lt;code&gt;document.domain&lt;/code&gt;的方式将页面的主域名改成了&lt;code&gt;163.com&lt;/code&gt;。这种方式主要用在主域名能设置成相同的页面之间的通信。如&lt;code&gt;http://xyq.163.com/&lt;/code&gt;，它的主域名可以是&lt;code&gt;xyq.163.com&lt;/code&gt;或&lt;code&gt;163.com&lt;/code&gt;；&lt;code&gt;http://xsd.163.com&lt;/code&gt;，它的主域名可以是&lt;code&gt;xsd.163.com&lt;/code&gt;或&lt;code&gt;163.com&lt;/code&gt;，所以这两个站点下的页面能够将主域名设置成163.com。&lt;/p&gt;
&lt;h3 id=&quot;3-使用iframe&quot;&gt;&lt;a href=&quot;#3-使用iframe&quot; class=&quot;headerlink&quot; title=&quot;3 . 使用iframe&quot;&gt;&lt;/a&gt;3 . 使用iframe&lt;/h3&gt;&lt;p&gt;这种方式利用了window对象name属性的特征：在一个窗口(window)的生命周期内,窗口载入的所有的页面都是共享一个window.name的，每个页面对window.name都有读写的权限，window.name是持久存在一个窗口载入过的所有页面中的，并不会因新页面的载入而进行重置。&lt;/p&gt;
&lt;h3 id=&quot;4-Access-Control-Allow-Origin&quot;&gt;&lt;a href=&quot;#4-Access-Control-Allow-Origin&quot; class=&quot;headerlink&quot; title=&quot;4 . Access-Control-Allow-Origin&quot;&gt;&lt;/a&gt;4 . Access-Control-Allow-Origin&lt;/h3&gt;&lt;p&gt;正常情况下我们的接口都是jsonp的格式，可是万一遇到其它格式的接口怎么办？比如json格式，这个时候可以通过&lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;来实现跨域。这种方式主要是后台同学配置，接口使用&lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;设置对应项目的域名，前端同学这边像平常调用接口一样，不需要再做其他处理。如下面的例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;   $.ajax({
       url: &amp;quot;http://api.ypw.163.com/api/app&amp;quot;,
       type: &amp;quot;POST&amp;quot;,
       data: JSON.stringify(postData),
       dataType: &amp;quot;application/json&amp;quot;,
       headers: {&amp;quot;X-Ypw-Token&amp;quot;: user_token, &amp;quot;Content-Type&amp;quot;: &amp;quot;application/json&amp;quot;},
       success: function(result) {
           renderPage(result);
       }
   });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;data为需要传输的数据，dataType是接口的格式。比平常接口调用多了的headers部分，是这个接口考虑到安全性的问题，接口开发同学需要我添加一个key，并且把user_token用base64加密之后传输给他，并不是跨域需要设置的东西，即这种方式跟平常调用接口一样。&lt;br&gt;好像这种方式挺好用的。确实，可是最大的问题是ie7、8、9都还不支持，所以目前也就能用在移动端了。&lt;/p&gt;
&lt;h3 id=&quot;5-Chrome-–disable-web-security-快捷方式&quot;&gt;&lt;a href=&quot;#5-Chrome-–disable-web-security-快捷方式&quot; class=&quot;headerlink&quot; title=&quot;5 . Chrome –disable-web-security 快捷方式&quot;&gt;&lt;/a&gt;5 . Chrome –disable-web-security 快捷方式&lt;/h3&gt;&lt;p&gt;这种方式适用于Chrome浏览器，使浏览器支持跨域请求。在快捷方式的属性中配置&lt;code&gt;--args --disable-web-security --user-data-dir&lt;/code&gt;参数，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xth8v.com2.z0.glb.clouddn.com/image/n_chrome_prop.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;跨域，怎么处理跨域问题？无论是在面试中，还是在工作当中，总是会经常被问到，所以在这里总结下跨域的几种处理方式好了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-jsonp方式&quot;&gt;&lt;a href=&quot;#1-jsonp方式&quot; class=&quot;h
    
    </summary>
    
    
      <category term="跨域" scheme="http://mmrxia.github.io/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>git 常用命令速查表</title>
    <link href="http://mmrxia.github.io/2016/05/09/git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5%E8%A1%A8/"/>
    <id>http://mmrxia.github.io/2016/05/09/git-常用命令速查表/</id>
    <published>2016-05-09T07:17:43.000Z</published>
    <updated>2016-05-09T07:34:05.237Z</updated>
    
    <content type="html">&lt;p&gt;git作为代码管理工具的好处，这里就不多说了，目前也有很多git操作的可视化工具，如：TortoiseGit、SourceTree等。&lt;br&gt;相比可视化工具，笔者还是更喜欢使用原始命令来进行操作，下面附一张git常用命令速查表，以备不时之需。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xth8v.com2.z0.glb.qiniucdn.com/image/git_common_order.jpg&quot; alt=&quot;git常用命令&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;git作为代码管理工具的好处，这里就不多说了，目前也有很多git操作的可视化工具，如：TortoiseGit、SourceTree等。&lt;br&gt;相比可视化工具，笔者还是更喜欢使用原始命令来进行操作，下面附一张git常用命令速查表，以备不时之需。&lt;/p&gt;
&lt;p&gt;&lt;img src
    
    </summary>
    
    
      <category term="git" scheme="http://mmrxia.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>SKU算法总结分享</title>
    <link href="http://mmrxia.github.io/2016/04/26/SKU%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93%E5%88%86%E4%BA%AB/"/>
    <id>http://mmrxia.github.io/2016/04/26/SKU算法总结分享/</id>
    <published>2016-04-26T08:28:49.000Z</published>
    <updated>2016-04-28T09:30:18.479Z</updated>
    
    <content type="html">&lt;h4 id=&quot;1-SKU简介&quot;&gt;&lt;a href=&quot;#1-SKU简介&quot; class=&quot;headerlink&quot; title=&quot;1. SKU简介&quot;&gt;&lt;/a&gt;1. SKU简介&lt;/h4&gt;&lt;p&gt;下面是SKU来自维基百科的解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;最小存货单位&lt;/strong&gt;（Stock Keeping Unit, SKU）是一个会计学名词，定义为保存库存控制的最小可用单位，例如纺织品中一个SKU通常表示规格、颜色、款式，而在连锁零售门店中有时称单品为一个SKU。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;直观一点的实际应用，可以参考淘宝的商品SKU选择界面，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xth8v.com2.z0.glb.qiniucdn.com/image/sku.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-基础数据&quot;&gt;&lt;a href=&quot;#2-基础数据&quot; class=&quot;headerlink&quot; title=&quot;2. 基础数据&quot;&gt;&lt;/a&gt;2. 基础数据&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    //属性集
    var keys = [
        [&amp;#39;10&amp;#39;],  //iPhone7s
        [&amp;#39;20&amp;#39;,&amp;#39;21&amp;#39;,&amp;#39;22&amp;#39;,&amp;#39;23&amp;#39;,&amp;#39;24&amp;#39;],  //土豪金,白色,黑色,灰色,粉色
        [&amp;#39;30&amp;#39;,&amp;#39;31&amp;#39;,&amp;#39;32&amp;#39;,&amp;#39;33&amp;#39;,&amp;#39;34&amp;#39;,&amp;#39;35&amp;#39;,&amp;#39;36&amp;#39;,&amp;#39;37&amp;#39;,&amp;#39;38&amp;#39;],  //港版，大陆行货，亚太版，美版，韩版，日版，意大利版，俄罗斯版，欧版
        [&amp;#39;40&amp;#39;] //4.7寸
    ];
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    //后台读取结果集
    var data = {
        &amp;quot;10;24;31;40&amp;quot;:{&amp;quot;price&amp;quot;:366,&amp;quot;count&amp;quot;:46},
        &amp;quot;10;24;33;40&amp;quot;:{&amp;quot;price&amp;quot;:416,&amp;quot;count&amp;quot;:77},
        &amp;quot;10;24;34;40&amp;quot;:{&amp;quot;price&amp;quot;:456,&amp;quot;count&amp;quot;:9},
        &amp;quot;10;24;35;40&amp;quot;:{&amp;quot;price&amp;quot;:371,&amp;quot;count&amp;quot;:33},
        &amp;quot;10;24;36;40&amp;quot;:{&amp;quot;price&amp;quot;:411,&amp;quot;count&amp;quot;:79},
        &amp;quot;10;24;37;40&amp;quot;:{&amp;quot;price&amp;quot;:421,&amp;quot;count&amp;quot;:87},
        &amp;quot;10;24;38;40&amp;quot;:{&amp;quot;price&amp;quot;:461,&amp;quot;count&amp;quot;:9},
        &amp;quot;10;23;32;40&amp;quot;:{&amp;quot;price&amp;quot;:406,&amp;quot;count&amp;quot;:9},
        &amp;quot;10;23;33;40&amp;quot;:{&amp;quot;price&amp;quot;:416,&amp;quot;count&amp;quot;:90},
        &amp;quot;10;23;36;40&amp;quot;:{&amp;quot;price&amp;quot;:411,&amp;quot;count&amp;quot;:90},
        &amp;quot;10;23;37;40&amp;quot;:{&amp;quot;price&amp;quot;:421,&amp;quot;count&amp;quot;:10},
        &amp;quot;10;23;38;40&amp;quot;:{&amp;quot;price&amp;quot;:461,&amp;quot;count&amp;quot;:9},
        &amp;quot;10;22;35;40&amp;quot;:{&amp;quot;price&amp;quot;:361,&amp;quot;count&amp;quot;:25},
        &amp;quot;10;21;33;40&amp;quot;:{&amp;quot;price&amp;quot;:416,&amp;quot;count&amp;quot;:10},
        &amp;quot;10;21;38;40&amp;quot;:{&amp;quot;price&amp;quot;:461,&amp;quot;count&amp;quot;:80},
        &amp;quot;10;21;30;40&amp;quot;:{&amp;quot;price&amp;quot;:356,&amp;quot;count&amp;quot;:43},
        &amp;quot;10;20;31;40&amp;quot;:{&amp;quot;price&amp;quot;:356,&amp;quot;count&amp;quot;:46},
        &amp;quot;10;20;32;40&amp;quot;:{&amp;quot;price&amp;quot;:396,&amp;quot;count&amp;quot;:49},
        &amp;quot;10;20;35;40&amp;quot;:{&amp;quot;price&amp;quot;:361,&amp;quot;count&amp;quot;:34},
        &amp;quot;10;20;36;40&amp;quot;:{&amp;quot;price&amp;quot;:401,&amp;quot;count&amp;quot;:41},
        &amp;quot;10;20;30;40&amp;quot;:{&amp;quot;price&amp;quot;:346,&amp;quot;count&amp;quot;:3}
    };
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;3-算法分析&quot;&gt;&lt;a href=&quot;#3-算法分析&quot; class=&quot;headerlink&quot; title=&quot;3. 算法分析&quot;&gt;&lt;/a&gt;3. 算法分析&lt;/h4&gt;&lt;h4 id=&quot;4-代码实现&quot;&gt;&lt;a href=&quot;#4-代码实现&quot; class=&quot;headerlink&quot; title=&quot;4. 代码实现&quot;&gt;&lt;/a&gt;4. 代码实现&lt;/h4&gt;&lt;h4 id=&quot;5-demo演示&quot;&gt;&lt;a href=&quot;#5-demo演示&quot; class=&quot;headerlink&quot; title=&quot;5. demo演示&quot;&gt;&lt;/a&gt;5. demo演示&lt;/h4&gt;</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-SKU简介&quot;&gt;&lt;a href=&quot;#1-SKU简介&quot; class=&quot;headerlink&quot; title=&quot;1. SKU简介&quot;&gt;&lt;/a&gt;1. SKU简介&lt;/h4&gt;&lt;p&gt;下面是SKU来自维基百科的解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;最小存
    
    </summary>
    
    
      <category term="sku" scheme="http://mmrxia.github.io/tags/sku/"/>
    
      <category term="算法" scheme="http://mmrxia.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="随笔" scheme="http://mmrxia.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>markdown基本语法</title>
    <link href="http://mmrxia.github.io/2016/04/22/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>http://mmrxia.github.io/2016/04/22/markdown基本语法/</id>
    <published>2016-04-22T08:47:01.000Z</published>
    <updated>2016-04-26T08:32:19.056Z</updated>
    
    <content type="html">&lt;h2 id=&quot;主要内容&quot;&gt;&lt;a href=&quot;#主要内容&quot; class=&quot;headerlink&quot; title=&quot;主要内容&quot;&gt;&lt;/a&gt;主要内容&lt;/h2&gt;&lt;blockquote&gt;
&lt;h4 id=&quot;Markdown是什么？&quot;&gt;&lt;a href=&quot;#Markdown是什么？&quot; class=&quot;headerlink&quot; title=&quot;Markdown是什么？&quot;&gt;&lt;/a&gt;Markdown是&lt;em&gt;什么&lt;/em&gt;？&lt;/h4&gt;&lt;h4 id=&quot;谁发明了这么个东西？&quot;&gt;&lt;a href=&quot;#谁发明了这么个东西？&quot; class=&quot;headerlink&quot; title=&quot;谁发明了这么个东西？&quot;&gt;&lt;/a&gt;&lt;em&gt;谁&lt;/em&gt;发明了这么个东西？&lt;/h4&gt;&lt;h4 id=&quot;为什么要使用它？&quot;&gt;&lt;a href=&quot;#为什么要使用它？&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用它？&quot;&gt;&lt;/a&gt;&lt;em&gt;为什么&lt;/em&gt;要使用它？&lt;/h4&gt;&lt;h4 id=&quot;怎么使用？&quot;&gt;&lt;a href=&quot;#怎么使用？&quot; class=&quot;headerlink&quot; title=&quot;怎么使用？&quot;&gt;&lt;/a&gt;&lt;em&gt;怎么&lt;/em&gt;使用？&lt;/h4&gt;&lt;h4 id=&quot;都谁在用？&quot;&gt;&lt;a href=&quot;#都谁在用？&quot; class=&quot;headerlink&quot; title=&quot;都谁在用？&quot;&gt;&lt;/a&gt;都&lt;em&gt;谁&lt;/em&gt;在用？&lt;/h4&gt;&lt;h4 id=&quot;感觉有意思？不怕你看见，就怕你试试&quot;&gt;&lt;a href=&quot;#感觉有意思？不怕你看见，就怕你试试&quot; class=&quot;headerlink&quot; title=&quot;感觉有意思？不怕你看见，就怕你试试&quot;&gt;&lt;/a&gt;感觉有意思？&lt;em&gt;不怕你看见，就怕你试试&lt;/em&gt;&lt;/h4&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h2&gt;&lt;h3 id=&quot;1-Markdown是什么？&quot;&gt;&lt;a href=&quot;#1-Markdown是什么？&quot; class=&quot;headerlink&quot; title=&quot;1. Markdown是什么？&quot;&gt;&lt;/a&gt;1. Markdown是&lt;em&gt;什么&lt;/em&gt;？&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Markdown&lt;/strong&gt;是一种轻量级&lt;strong&gt;标记语言&lt;/strong&gt;，它以纯文本形式(&lt;em&gt;易读、易写、易更改&lt;/em&gt;)编写文档，并最终以HTML格式发布。&lt;br&gt;&lt;strong&gt;Markdown&lt;/strong&gt;也可以理解为将以MARKDOWN语言编写的语言转换成HTML内容的工具，最初是一个perl脚本&lt;em&gt;Markdown.pl&lt;/em&gt;。    &lt;/p&gt;
&lt;h3 id=&quot;2-谁发明了这么个东西？&quot;&gt;&lt;a href=&quot;#2-谁发明了这么个东西？&quot; class=&quot;headerlink&quot; title=&quot;2. 谁发明了这么个东西？&quot;&gt;&lt;/a&gt;2. &lt;em&gt;谁&lt;/em&gt;发明了这么个东西？&lt;/h3&gt;&lt;p&gt;它由&lt;a href=&quot;http://www.aaronsw.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;Aaron Swartz&lt;/strong&gt;&lt;/a&gt;和&lt;strong&gt;John Gruber&lt;/strong&gt;共同设计，&lt;strong&gt;Aaron Swartz&lt;/strong&gt;就是那位于去年（&lt;em&gt;2013年1月11日&lt;/em&gt;）自杀,有着&lt;strong&gt;开挂&lt;/strong&gt;一般人生经历的程序员。维基百科对他的&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;介绍&lt;/a&gt;是：&lt;strong&gt;软件工程师、作家、政治组织者、互联网活动家、维基百科人&lt;/strong&gt;。    &lt;/p&gt;
&lt;p&gt;他有着足以让你跪拜的人生经历：    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;14岁&lt;/strong&gt;参与RSS 1.0规格标准的制订。     &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2004&lt;/strong&gt;年入读&lt;strong&gt;斯坦福&lt;/strong&gt;，之后退学。   &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2005&lt;/strong&gt;年创建&lt;a href=&quot;http://infogami.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Infogami&lt;/a&gt;，之后与&lt;a href=&quot;http://www.reddit.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reddit&lt;/a&gt;合并成为其合伙人。   &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2010&lt;/strong&gt;年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案&lt;strong&gt;居然&lt;/strong&gt;被撤回。   &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2011&lt;/strong&gt;年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。     &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2013&lt;/strong&gt;年1月自杀身亡。    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;天才都有早逝的归途（又是一位&lt;strong&gt;犹太人&lt;/strong&gt;）。&lt;/p&gt;
&lt;h3 id=&quot;3-为什么要使用它？&quot;&gt;&lt;a href=&quot;#3-为什么要使用它？&quot; class=&quot;headerlink&quot; title=&quot;3. 为什么要使用它？&quot;&gt;&lt;/a&gt;3. &lt;em&gt;为什么&lt;/em&gt;要使用它？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;它是易读（&lt;em&gt;看起开舒服&lt;/em&gt;）、易写（&lt;em&gt;语法简单&lt;/em&gt;）、易更改&lt;strong&gt;纯文本&lt;/strong&gt;。处处体现着&lt;strong&gt;极简主义&lt;/strong&gt;的影子。&lt;/li&gt;
&lt;li&gt;兼容HTML，可以转换为HTML格式发布。&lt;/li&gt;
&lt;li&gt;跨平台使用。&lt;/li&gt;
&lt;li&gt;越来越多的网站支持Markdown。&lt;/li&gt;
&lt;li&gt;更方便清晰的组织你的电子邮件。（Markdown-here, Airmail）&lt;/li&gt;
&lt;li&gt;摆脱Word（我不是认真的）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-怎么使用？&quot;&gt;&lt;a href=&quot;#4-怎么使用？&quot; class=&quot;headerlink&quot; title=&quot;4. 怎么使用？&quot;&gt;&lt;/a&gt;4. &lt;em&gt;怎么&lt;/em&gt;使用？&lt;/h3&gt;&lt;p&gt;如果不算&lt;strong&gt;扩展&lt;/strong&gt;，Markdown的语法绝对&lt;strong&gt;简单&lt;/strong&gt;到让你爱不释手。&lt;/p&gt;
&lt;p&gt;废话太多，下面正文，Markdown语法主要分为如下几大部分：&lt;br&gt;&lt;strong&gt;标题&lt;/strong&gt;，&lt;strong&gt;段落&lt;/strong&gt;，&lt;strong&gt;区块引用&lt;/strong&gt;，&lt;strong&gt;代码区块&lt;/strong&gt;，&lt;strong&gt;强调&lt;/strong&gt;，&lt;strong&gt;列表&lt;/strong&gt;，&lt;strong&gt;分割线&lt;/strong&gt;，&lt;strong&gt;链接&lt;/strong&gt;，&lt;strong&gt;图片&lt;/strong&gt;，&lt;strong&gt;反斜杠 &lt;code&gt;\&lt;/code&gt;&lt;/strong&gt;，&lt;strong&gt;符号’`’&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;4-1-标题&quot;&gt;&lt;a href=&quot;#4-1-标题&quot; class=&quot;headerlink&quot; title=&quot;4.1 标题&quot;&gt;&lt;/a&gt;4.1 标题&lt;/h4&gt;&lt;p&gt;两种形式：&lt;br&gt;1）使用&lt;code&gt;=&lt;/code&gt;和&lt;code&gt;-&lt;/code&gt;标记一级和二级标题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一级标题&lt;br&gt;&lt;code&gt;=========&lt;/code&gt;&lt;br&gt;二级标题&lt;br&gt;&lt;code&gt;---------&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1 id=&quot;一级标题&quot;&gt;&lt;a href=&quot;#一级标题&quot; class=&quot;headerlink&quot; title=&quot;一级标题   &quot;&gt;&lt;/a&gt;一级标题   &lt;/h1&gt;&lt;h2 id=&quot;二级标题&quot;&gt;&lt;a href=&quot;#二级标题&quot; class=&quot;headerlink&quot; title=&quot;二级标题&quot;&gt;&lt;/a&gt;二级标题&lt;/h2&gt;&lt;/blockquote&gt;
&lt;p&gt;2）使用&lt;code&gt;#&lt;/code&gt;，可表示1-6级标题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# 一级标题&lt;br&gt;## 二级标题&lt;br&gt;### 三级标题&lt;br&gt;#### 四级标题&lt;br&gt;##### 五级标题&lt;br&gt;###### 六级标题    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1 id=&quot;一级标题-1&quot;&gt;&lt;a href=&quot;#一级标题-1&quot; class=&quot;headerlink&quot; title=&quot;一级标题&quot;&gt;&lt;/a&gt;一级标题&lt;/h1&gt;&lt;h2 id=&quot;二级标题-1&quot;&gt;&lt;a href=&quot;#二级标题-1&quot; class=&quot;headerlink&quot; title=&quot;二级标题&quot;&gt;&lt;/a&gt;二级标题&lt;/h2&gt;&lt;h3 id=&quot;三级标题&quot;&gt;&lt;a href=&quot;#三级标题&quot; class=&quot;headerlink&quot; title=&quot;三级标题&quot;&gt;&lt;/a&gt;三级标题&lt;/h3&gt;&lt;h4 id=&quot;四级标题&quot;&gt;&lt;a href=&quot;#四级标题&quot; class=&quot;headerlink&quot; title=&quot;四级标题&quot;&gt;&lt;/a&gt;四级标题&lt;/h4&gt;&lt;h5 id=&quot;五级标题&quot;&gt;&lt;a href=&quot;#五级标题&quot; class=&quot;headerlink&quot; title=&quot;五级标题&quot;&gt;&lt;/a&gt;五级标题&lt;/h5&gt;&lt;h6 id=&quot;六级标题&quot;&gt;&lt;a href=&quot;#六级标题&quot; class=&quot;headerlink&quot; title=&quot;六级标题&quot;&gt;&lt;/a&gt;六级标题&lt;/h6&gt;&lt;/blockquote&gt;
&lt;h4 id=&quot;4-2-段落&quot;&gt;&lt;a href=&quot;#4-2-段落&quot; class=&quot;headerlink&quot; title=&quot;4.2 段落&quot;&gt;&lt;/a&gt;4.2 段落&lt;/h4&gt;&lt;p&gt;段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用&lt;strong&gt;两个以上&lt;/strong&gt;空格加上回车（引用中换行省略回车）。&lt;/p&gt;
&lt;h4 id=&quot;4-3-区块引用&quot;&gt;&lt;a href=&quot;#4-3-区块引用&quot; class=&quot;headerlink&quot; title=&quot;4.3 区块引用&quot;&gt;&lt;/a&gt;4.3 区块引用&lt;/h4&gt;&lt;p&gt;在段落的每行或者只在第一行使用符号&lt;code&gt;&amp;gt;&lt;/code&gt;,还可使用多个嵌套引用，如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&gt; 区块引用&lt;br&gt;&gt;&amp;gt; 嵌套引用  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;区块引用  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;嵌套引用 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;4-4-代码区块&quot;&gt;&lt;a href=&quot;#4-4-代码区块&quot; class=&quot;headerlink&quot; title=&quot;4.4 代码区块&quot;&gt;&lt;/a&gt;4.4 代码区块&lt;/h4&gt;&lt;p&gt;代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如&lt;br&gt;普通段落：&lt;/p&gt;
&lt;p&gt;void main()&lt;br&gt;{&lt;br&gt;    printf(“Hello, Markdown.”);&lt;br&gt;}    &lt;/p&gt;
&lt;p&gt;代码区块：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void main()
{
    printf(&amp;quot;Hello, Markdown.&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;:需要和普通段落之间存在空行。&lt;/p&gt;
&lt;h4 id=&quot;4-5-强调&quot;&gt;&lt;a href=&quot;#4-5-强调&quot; class=&quot;headerlink&quot; title=&quot;4.5 强调&quot;&gt;&lt;/a&gt;4.5 强调&lt;/h4&gt;&lt;p&gt;在强调内容两侧分别加上&lt;code&gt;*&lt;/code&gt;或者&lt;code&gt;_&lt;/code&gt;，如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;*斜体*，_斜体_&lt;br&gt;**粗体**，__粗体__&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;斜体&lt;/em&gt;，&lt;em&gt;斜体&lt;/em&gt;&lt;br&gt;&lt;strong&gt;粗体&lt;/strong&gt;，&lt;strong&gt;粗体&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;4-6-列表&quot;&gt;&lt;a href=&quot;#4-6-列表&quot; class=&quot;headerlink&quot; title=&quot;4.6 列表&quot;&gt;&lt;/a&gt;4.6 列表&lt;/h4&gt;&lt;p&gt;使用&lt;code&gt;·&lt;/code&gt;、&lt;code&gt;+&lt;/code&gt;、或&lt;code&gt;-&lt;/code&gt;标记无序列表，如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;-（+*） 第一项&lt;br&gt;-（+*） 第二项&lt;br&gt;- （+*）第三项&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：标记后面最少有一个&lt;em&gt;空格&lt;/em&gt;或&lt;em&gt;制表符&lt;/em&gt;。若不在引用区块中，必须和前方段落之间存在空行。&lt;/p&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;第一项&lt;/li&gt;
&lt;li&gt;第二项&lt;/li&gt;
&lt;li&gt;第三项&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;有序列表的标记方式是将上述的符号换成数字,并辅以&lt;code&gt;.&lt;/code&gt;，如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1 . 第一项&lt;br&gt;2 . 第二项&lt;br&gt;3 . 第三项    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;第一项&lt;/li&gt;
&lt;li&gt;第二项&lt;/li&gt;
&lt;li&gt;第三项&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;4-7-分割线&quot;&gt;&lt;a href=&quot;#4-7-分割线&quot; class=&quot;headerlink&quot; title=&quot;4.7 分割线&quot;&gt;&lt;/a&gt;4.7 分割线&lt;/h4&gt;&lt;p&gt;分割线最常使用就是三个或以上&lt;code&gt;*&lt;/code&gt;，还可以使用&lt;code&gt;-&lt;/code&gt;和&lt;code&gt;_&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;4-8-链接&quot;&gt;&lt;a href=&quot;#4-8-链接&quot; class=&quot;headerlink&quot; title=&quot;4.8 链接&quot;&gt;&lt;/a&gt;4.8 链接&lt;/h4&gt;&lt;p&gt;链接可以由两种形式生成：&lt;strong&gt;行内式&lt;/strong&gt;和&lt;strong&gt;参考式&lt;/strong&gt;。&lt;br&gt;&lt;strong&gt;行内式&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[younghz的Markdown库](https:://github.com/younghz/Markdown “Markdown”)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:://github.com/younghz/Markdown&quot; title=&quot;Markdown&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;younghz的Markdown库&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;参考式&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[younghz的Markdown库1][1]&lt;br&gt;[younghz的Markdown库2][2]&lt;br&gt;[1]:https:://github.com/younghz/Markdown “Markdown”&lt;br&gt;[2]:https:://github.com/younghz/Markdown “Markdown”    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:://github.com/younghz/Markdown&quot; title=&quot;Markdown&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;younghz的Markdown库1&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https:://github.com/younghz/Markdown&quot; title=&quot;Markdown&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;younghz的Markdown库2&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：上述的&lt;code&gt;[1]:https:://github.com/younghz/Markdown &amp;quot;Markdown&amp;quot;&lt;/code&gt;不出现在区块中。&lt;/p&gt;
&lt;h4 id=&quot;4-9-图片&quot;&gt;&lt;a href=&quot;#4-9-图片&quot; class=&quot;headerlink&quot; title=&quot;4.9 图片&quot;&gt;&lt;/a&gt;4.9 图片&lt;/h4&gt;&lt;p&gt;添加图片的形式和链接相似，只需在链接的基础上前方加一个&lt;code&gt;！&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;4-10-反斜杠&quot;&gt;&lt;a href=&quot;#4-10-反斜杠&quot; class=&quot;headerlink&quot; title=&quot;4.10 反斜杠\&quot;&gt;&lt;/a&gt;4.10 反斜杠&lt;code&gt;\&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;相当于&lt;strong&gt;反转义&lt;/strong&gt;作用。使符号成为普通符号。&lt;/p&gt;
&lt;h4 id=&quot;4-11-符号’-’&quot;&gt;&lt;a href=&quot;#4-11-符号’-’&quot; class=&quot;headerlink&quot; title=&quot;4.11 符号’`’&quot;&gt;&lt;/a&gt;4.11 符号’`’&lt;/h4&gt;&lt;p&gt;起到标记作用。如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;`ctrl+a`&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;ctrl+a&lt;/code&gt;    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;5-都谁在用？&quot;&gt;&lt;a href=&quot;#5-都谁在用？&quot; class=&quot;headerlink&quot; title=&quot;5. 都谁在用？&quot;&gt;&lt;/a&gt;5. 都&lt;em&gt;谁&lt;/em&gt;在用？&lt;/h4&gt;&lt;p&gt;Markdown的使用者：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub&lt;/li&gt;
&lt;li&gt;简书&lt;/li&gt;
&lt;li&gt;Stack Overflow&lt;/li&gt;
&lt;li&gt;Apollo&lt;/li&gt;
&lt;li&gt;Moodle&lt;/li&gt;
&lt;li&gt;Reddit&lt;/li&gt;
&lt;li&gt;等等&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;6-感觉有意思？趁热打铁，推荐几个工具。&quot;&gt;&lt;a href=&quot;#6-感觉有意思？趁热打铁，推荐几个工具。&quot; class=&quot;headerlink&quot; title=&quot;6. 感觉有意思？趁热打铁，推荐几个工具。&quot;&gt;&lt;/a&gt;6. 感觉有意思？趁热打铁，推荐几个&lt;em&gt;工具&lt;/em&gt;。&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Chrome&lt;/strong&gt;下的stackedit插件可以离线使用，很爽。也不用担心平台受限。&lt;br&gt;在线的dillinger.io算是评价好的了，可是不能离线使用。    &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Windowns&lt;/strong&gt;下的MarkdownPad也用过，不过免费版的体验不是很好。    &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mac&lt;/strong&gt;下的Mou是国人贡献的，口碑很好。推荐。    &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt;下的ReText不错。    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;其实在对语法了如于心的话，直接用编辑器就可以了，脑子里满满的都是格式化好的文本啊。&lt;/strong&gt;&lt;br&gt;我现在使用&lt;code&gt;马克飞象&lt;/code&gt; + &lt;code&gt;Markdown-here&lt;/code&gt;，先编辑好，然后一键格式化，挺方便。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。&lt;br&gt;虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]&lt;br&gt;(&lt;a href=&quot;http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/)。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/)。&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;以上基本是所有traditonal markdown的语法。&lt;/p&gt;
&lt;h3 id=&quot;其它：&quot;&gt;&lt;a href=&quot;#其它：&quot; class=&quot;headerlink&quot; title=&quot;其它：&quot;&gt;&lt;/a&gt;其它：&lt;/h3&gt;&lt;p&gt;列表的使用(非traditonal markdown)：&lt;/p&gt;
&lt;p&gt;用&lt;code&gt;|&lt;/code&gt;表示表格纵向边界，表头和表内容用&lt;code&gt;-&lt;/code&gt;隔开，并可用&lt;code&gt;:&lt;/code&gt;进行对齐设置，两边都有&lt;code&gt;:&lt;/code&gt;则表示居中，若不加&lt;code&gt;:&lt;/code&gt;则默认左对齐。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;网站名称&lt;/th&gt;
&lt;th&gt;链接&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;stackedit&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://stackedit.io/editor&quot; title=&quot;stackedit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://stackedit.io/editor&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;github&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/mmrxia&quot; title=&quot;xqs&amp;#39;s github&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/mmrxia&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;关于其它扩展语法可参见具体工具的使用说明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;主要内容&quot;&gt;&lt;a href=&quot;#主要内容&quot; class=&quot;headerlink&quot; title=&quot;主要内容&quot;&gt;&lt;/a&gt;主要内容&lt;/h2&gt;&lt;blockquote&gt;
&lt;h4 id=&quot;Markdown是什么？&quot;&gt;&lt;a href=&quot;#Markdown是什么？&quot; class=
    
    </summary>
    
      <category term="参考资料" scheme="http://mmrxia.github.io/categories/%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/"/>
    
    
      <category term="markdown" scheme="http://mmrxia.github.io/tags/markdown/"/>
    
  </entry>
  
</feed>
